1. Every player is dealt 2 cards
For simplicity, our first version will only support two players - the dealer and the human player.

The dealing starts at the first player, and continues around the table until the dealer is dealt and then repeats, starting again with the first player, until all players have two cards.

The dealer only has one visible card. The other is “face down” and isn’t visible to players. All player cards are visible.

2. The player’s turn
In our limited version of blackjack, the player will have two options: Hit or Stand.

If a player chooses to hit, they are dealt a new card and will then be allowed to choose between the hit and stand options again.

If a player chooses to stand their turn ends and the next player is up.

3. The dealer’s turn
In the first iteration our dealer won’t do anything, and will just display their hand. After that the game will end.

In our second iteration the dealer will play with typical dealer rules - if they have a score of 16 or less, or a soft 17, they will hit. This means we will need to implement scoring, and will be able to determine which player has won the game.

4. Determining the winner
The winner is the player who has the highest score without going over 21. Cards 2-10 are worth their face value in points. Aces are worth 1 or 11 points (whichever is best without busting), and face cards (J, Q, K) are all worth 10 points.

A “soft 17” is a score of 17 in which 11 of the points come from an Ace card.

If the player busts during their turn, the dealer automatically wins.

Blackjack occurs when a player has an Ace with a face card (J, Q, K), or a 10 card. In traditional blackjack there are special rules for this, but for our simple game we won’t be adding that.

Bonus
This exercise is ripe with bonus options. You can:

Expand upon the game, adding in new rules like allowing the player or dealer to win immediately if they have a natural blackjack.
Add a way for players to bet, and to keep track of their wins and losses.
Add in additional rules like splitting and doubling down.
Add support for additional human players, or for a single player to play multiple hands against the computer.
Add AI for the “human” players with varying degrees of intelligence. Eg the dealer has a specific strategy regardless of what players have visible, but a player’s optimal strategy will vary based on the cards the dealer has visible. Try different strategies out or look up some and implement them.
Lastly, you could go a step further adding in some support for card counting and varying bets based on the state of the deck. See if you can come up with a strategy that reliably wins money over time given a limited cash pool.


...



In this exercise we are going to explore how we might refactor some code - like the code used to create our blackjack game - into a package that might be used by other developers. In doing this, we will need to ask ourselves which functions, types, and other data types should be exported and documented vs which should be unexported and kept as simply implementation details.

While we are refactoring our code we are also going to adjust how our game is played; rather than always expecting the player to be a person typing input into the console, we are instead going to expose an interface that can be implemented in order to play the blackjack game. Something like this:

type AI interface {
  // Define functions needed for an AI to play your blackjack game.
}
NOTE: I’m not going to tell you what functions to add to the AI type just yet, but I’m going to try to create a single video that covers these and add it to the start of the series so you can check it out if you are looking for ideas without wanting to spoil the entire exercise.

Explaining what all this entails is tricky without spoiling the exercise, but in the end you will have two packages - main and blackjack - where main contains the AI implementation and will start the game, while blackjack contains the AI interface as well as all the (mostly) hidden logic to actually run the blackjack game based on decisions made by the AI. In short, you want a main package that looks kinda like this:

package main

import (
  "fmt"

  "github.com/gophercises/blackjack_ai/blackjack"
  // along with other imports
)

// This type should implement the blackjack.AI interface
type AI struct {}

func main() {
  var ai AI
  // setup ai if you need to...

  opts := blackjack.Options{
    Hands: 100,
    Decks: 3,
  }
  game := blackjack.New(opts)
  winnings := game.Play(ai)
  fmt.Println("Our AI won/lost:", winnings)
}
Your implementation details may vary. You may name things differently, call your functions by different names, or whatever else you see fit. The primary point is that in the end our blackjack package won’t export more than it needs to, it will power playing the actual game, and we will be writing an AI to play the game.

While refactoring your code and writing the blackjack package, you will also need to add support for a few more parts of the blackjack game. For starters, you will definitely need betting so that we can keep track of how our AI works. You can start off by just making all hands worth 1 and keeping track of wins/losses, but having a way to bet would be ideal for the final version.

You may also want to add in more blackjack options like splitting, higher payouts on blackjack, and doubling down on a hand. Supporting splitting can be especially tricky if you support an arbitrary number of splits, so keep that in mind as you code it up and feel free to skip it until the end if you wish.